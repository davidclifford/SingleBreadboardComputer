Sections:
00: "org0001:1000" (1000-1415)


Source: "Examples\mandelbrot.s"
                        	     1:     ; Mandelbrot using Matt Heffernan's algorithm
                        	     2:     .org $1000
                        	     3: 
                        	     4:     ; Start
00:1000 A90A            	     5:     lda #10
00:1002 2074FD          	     6:     jsr IO_ECHO
                        	     7: 
00:1005 A000            	     8:     ldy #0
                        	     9: loopy:
00:1007 A200            	    10:     ldx #0
                        	    11: loopx:
00:1009 20C212          	    12:     jsr mand_get
00:100C 18              	    13:     clc
00:100D 6920            	    14:     adc #' '
00:100F 2074FD          	    15:     jsr IO_ECHO
00:1012 2074FD          	    16:     jsr IO_ECHO
00:1015 E8              	    17:     inx
00:1016 E020            	    18:     cpx #MAND_WIDTH
00:1018 D0EF            	    19:     bne loopx
00:101A A90A            	    20:     lda #10
00:101C 2074FD          	    21:     jsr IO_ECHO
00:101F C8              	    22:     iny
00:1020 C016            	    23:     cpy #MAND_HEIGHT
00:1022 D0E3            	    24:     bne loopy
00:1024 A90A            	    25:     lda #10
00:1026 2074FD          	    26:     jsr IO_ECHO
00:1029 60              	    27:     rts
                        	    28: 
                        	    29:     .include io.s

Source: "io.s"
                        	     1: IO_ECHO = $FD74
                        	     2: receive = $FDE7
                        	     3: sendstr = $FE18
                        	     4: receiveburst = $FEB3
                        	     5: sendhex = $FE32
                        	     6: sendnum = $FE3C
                        	     7: 

Source: "Examples\mandelbrot.s"
                        	    30:     .include mandel.s

Source: "mandel.s"
                        	     1:    .include fixedpt.s

Source: "fixedpt.s"
                        	     1: FP_A = $FB
                        	     2: FP_B = $FD
                        	     3: FP_C = $F0
                        	     4: FP_R = $F2
                        	     5: 
                        	     6: CP_A = $10
                        	     7: CP_B = $18
                        	     8: CP_ML = $00
                        	     9: CP_MH = $01
                        	    10: CP_MD = $02
                        	    11: CP_DV = $03
                        	    12: CP_S0 = $04
                        	    13: CP_S1 = $05
                        	    14: CP_S2 = $06
                        	    15: CP_S3 = $07
                        	    16: 
                        	    17: fp_lda_byte:  ;FP_A = A
00:102A 85FC            	    18:    sta FP_A+1
00:102C 64FB            	    19:    stz FP_A
00:102E 60              	    20:    rts
                        	    21: 
                        	    22: fp_ldb_byte: ; FP_B = A
00:102F 85FE            	    23:    sta FP_B+1
00:1031 64FD            	    24:    stz FP_B
00:1033 60              	    25:    rts
                        	    26: 
                        	    27: FP_LDA .macro addr
                        	    28:    lda \addr
                        	    29:    sta FP_A
                        	    30:    lda \addr+1
                        	    31:    sta FP_A+1
                        	    32: .endmacro
                        	    33: 
                        	    34: FP_LDB .macro addr
                        	    35:    lda \addr
                        	    36:    sta FP_B
                        	    37:    lda \addr+1
                        	    38:    sta FP_B+1
                        	    39: .endmacro
                        	    40: 
                        	    41: FP_LDA_IMM .macro  val
                        	    42:    lda #<\val
                        	    43:    sta FP_A
                        	    44:    lda #>\val
                        	    45:    sta FP_A+1
                        	    46: .endmacro
                        	    47: 
                        	    48: FP_LDB_IMM .macro  val
                        	    49:    lda #<\val
                        	    50:    sta FP_B
                        	    51:    lda #>\val
                        	    52:    sta FP_B+1
                        	    53: .endmacro
                        	    54: 
                        	    55: FP_LDA_IMM_INT .macro  val
                        	    56:    stz FP_A
                        	    57:    lda #\val
                        	    58:    sta FP_A+1
                        	    59: .endmacro
                        	    60: 
                        	    61: FP_LDB_IMM_INT .macro  val
                        	    62:    stz FP_B
                        	    63:    lda #\val
                        	    64:    sta FP_B+1
                        	    65: .endmacro
                        	    66: 
                        	    67: FP_STC .macro addr
                        	    68:    lda FP_C
                        	    69:    sta \addr
                        	    70:    lda FP_C+1
                        	    71:    sta \addr+1
                        	    72: .endmacro
                        	    73: 
                        	    74: fp_floor_byte: ; A = floor(FP_C)
00:1034 A5F1            	    75:    lda FP_C+1
00:1036 2980            	    76:    and #$80
00:1038 F00C            	    77:    beq return$
00:103A A5F0            	    78:    lda FP_C
00:103C C900            	    79:    cmp #0
00:103E D003            	    80:    bne decc$
00:1040 A5F1            	    81:    lda FP_C+1
00:1042 60              	    82:    rts
                        	    83: decc$:
00:1043 A5F0            	    84:    lda FP_C
00:1045 3A              	    85:    dec
                        	    86: return$:
00:1046 60              	    87:    rts
                        	    88: 
                        	    89: fp_floor: ; FP_C = floor(FP_C)
00:1047 24F1            	    90:    bit FP_C+1
00:1049 1008            	    91:    bpl zerofrac$
00:104B A5F0            	    92:    lda FP_C
00:104D C900            	    93:    cmp #0
00:104F F002            	    94:    beq zerofrac$
00:1051 C6F1            	    95:    dec FP_C+1
                        	    96: zerofrac$:
00:1053 64F0            	    97:    stz FP_C
00:1055 60              	    98:    rts
                        	    99: 
                        	   100: FP_TCA .macro  ; FP_A = FP_C
                        	   101:    lda FP_C
                        	   102:    sta FP_A
                        	   103:    lda FP_C+1
                        	   104:    sta FP_A+1
                        	   105: .endmacro
                        	   106: 
                        	   107: FP_TCB .macro  ; FP_B = FP_C
                        	   108:    lda FP_C
                        	   109:    sta FP_B
                        	   110:    lda FP_C+1
                        	   111:    sta FP_B+1
                        	   112: .endmacro
                        	   113: 
                        	   114: fp_subtract: ; FP_C = FP_A - FP_B
00:1056 A5FB            	   115:    lda FP_A
00:1058 38              	   116:    sec
00:1059 E5FD            	   117:    sbc FP_B
00:105B 85F0            	   118:    sta FP_C
00:105D A5FC            	   119:    lda FP_A+1
00:105F E5FE            	   120:    sbc FP_B+1
00:1061 85F1            	   121:    sta FP_C+1
00:1063 60              	   122:    rts
                        	   123: 
                        	   124: fp_add: ; FP_C = FP_A + FP_B
00:1064 A5FB            	   125:    lda FP_A
00:1066 18              	   126:    clc
00:1067 65FD            	   127:    adc FP_B
00:1069 85F0            	   128:    sta FP_C
00:106B A5FC            	   129:    lda FP_A+1
00:106D 65FE            	   130:    adc FP_B+1
00:106F 85F1            	   131:    sta FP_C+1
00:1071 60              	   132:    rts
                        	   133: 
                        	   134: fp_divide: ; FP_C = FP_A / FP_B; FP_R = FP_A % FP_B
00:1072 DA              	   135:    phx
00:1073 5A              	   136:    phy
00:1074 A5FD            	   137:    lda FP_B
00:1076 48              	   138:    pha
00:1077 A5FE            	   139:    lda FP_B+1
00:1079 48              	   140:    pha ; preserve original B on stack
00:107A 24FC            	   141:    bit FP_A+1
00:107C 300A            	   142:    bmi abs_a$
00:107E A5FB            	   143:    lda FP_A
00:1080 85F0            	   144:    sta FP_C
00:1082 A5FC            	   145:    lda FP_A+1
00:1084 85F1            	   146:    sta FP_C+1
00:1086 800D            	   147:    bra check_sign_b$
                        	   148: abs_a$:
00:1088 A900            	   149:    lda #0
00:108A 38              	   150:    sec
00:108B E5FB            	   151:    sbc FP_A
00:108D 85F0            	   152:    sta FP_C
00:108F A900            	   153:    lda #0
00:1091 E5FC            	   154:    sbc FP_A+1
00:1093 85F1            	   155:    sta FP_C+1 ; C = |A|
                        	   156: check_sign_b$:
00:1095 24FE            	   157:    bit FP_B+1
00:1097 100D            	   158:    bpl shift_b$
00:1099 A900            	   159:    lda #0
00:109B 38              	   160:    sec
00:109C E5FD            	   161:    sbc FP_B
00:109E 85FD            	   162:    sta FP_B
00:10A0 A900            	   163:    lda #0
00:10A2 E5FE            	   164:    sbc FP_B+1
00:10A4 85FE            	   165:    sta FP_B+1
                        	   166: shift_b$:
00:10A6 A5FE            	   167:    lda FP_B+1
00:10A8 85FD            	   168:    sta FP_B
00:10AA A900            	   169:    lda #0
00:10AC 85FE            	   170:    sta FP_B+1
00:10AE 64F2            	   171:    stz FP_R
00:10B0 64F3            	   172:    stz FP_R+1
00:10B2 A210            	   173:    ldx #16     ;There are 16 bits in C
                        	   174: loop1$:
00:10B4 06F0            	   175:    asl FP_C    ;Shift hi bit of C into REM
00:10B6 26F1            	   176:    rol FP_C+1  ;(vacating the lo bit, which will be used for the quotient)
00:10B8 26F2            	   177:    rol FP_R
00:10BA 26F3            	   178:    rol FP_R+1
00:10BC A5F2            	   179:    lda FP_R
00:10BE 38              	   180:    sec         ;Trial subtraction
00:10BF E5FD            	   181:    sbc FP_B
00:10C1 A8              	   182:    tay
00:10C2 A5F3            	   183:    lda FP_R+1
00:10C4 E5FE            	   184:    sbc FP_B+1
00:10C6 9006            	   185:    bcc loop2$  ;Did subtraction succeed?
00:10C8 85F3            	   186:    sta FP_R+1   ;If yes, save it
00:10CA 84F2            	   187:    sty FP_R
00:10CC E6F0            	   188:    inc FP_C    ;and record a 1 in the quotient
                        	   189: loop2$:
00:10CE CA              	   190:    dex
00:10CF D0E3            	   191:    bne loop1$
00:10D1 68              	   192:    pla
00:10D2 85FE            	   193:    sta FP_B+1
00:10D4 68              	   194:    pla
00:10D5 85FD            	   195:    sta FP_B
00:10D7 24FE            	   196:    bit FP_B+1
00:10D9 3006            	   197:    bmi check_cancel$
00:10DB 24FC            	   198:    bit FP_A+1
00:10DD 3006            	   199:    bmi negative$
00:10DF 8011            	   200:    bra return$
                        	   201: check_cancel$:
00:10E1 24FC            	   202:    bit FP_A+1
00:10E3 300D            	   203:    bmi return$
                        	   204: negative$:
00:10E5 A900            	   205:    lda #0
00:10E7 38              	   206:    sec
00:10E8 E5F0            	   207:    sbc FP_C
00:10EA 85F0            	   208:    sta FP_C
00:10EC A900            	   209:    lda #0
00:10EE E5F1            	   210:    sbc FP_C+1
00:10F0 85F1            	   211:    sta FP_C+1
                        	   212: return$:
00:10F2 7A              	   213:    ply
00:10F3 FA              	   214:    plx
00:10F4 60              	   215:    rts
                        	   216: 
                        	   217: fp_multiply: ; FP_C = FP_A * FP_B; FP_R overflow
00:10F5 DA              	   218:    phx
00:10F6 5A              	   219:    phy
                        	   220:    ; push original A and B to stack
00:10F7 A5FB            	   221:    lda FP_A
00:10F9 48              	   222:    pha
00:10FA A5FC            	   223:    lda FP_A+1
00:10FC 48              	   224:    pha
00:10FD A5FD            	   225:    lda FP_B
00:10FF 48              	   226:    pha
00:1100 A5FE            	   227:    lda FP_B+1
00:1102 48              	   228:    pha
00:1103 24FC            	   229:    bit FP_A+1
00:1105 100D            	   230:    bpl check_sign_b$
00:1107 A900            	   231:    lda #0
00:1109 38              	   232:    sec
00:110A E5FB            	   233:    sbc FP_A
00:110C 85FB            	   234:    sta FP_A
00:110E A900            	   235:    lda #0
00:1110 E5FC            	   236:    sbc FP_A+1
00:1112 85FC            	   237:    sta FP_A+1 ; A = |A|
                        	   238: check_sign_b$:
00:1114 24FE            	   239:    bit FP_B+1
00:1116 100D            	   240:    bpl init_c$
00:1118 A900            	   241:    lda #0
00:111A 38              	   242:    sec
00:111B E5FD            	   243:    sbc FP_B
00:111D 85FD            	   244:    sta FP_B
00:111F A900            	   245:    lda #0
00:1121 E5FE            	   246:    sbc FP_B+1
00:1123 85FE            	   247:    sta FP_B+1 ; B = |B|
                        	   248: init_c$:
00:1125 A900            	   249:    lda #0
00:1127 85F2            	   250:    sta FP_R
00:1129 85F0            	   251:    sta FP_C
00:112B 85F1            	   252:    sta FP_C+1
00:112D A210            	   253:    ldx #16
                        	   254: loop1$:
00:112F 46FE            	   255:    lsr FP_B+1
00:1131 66FD            	   256:    ror FP_B
00:1133 900B            	   257:    bcc loop2$
00:1135 A8              	   258:    tay
00:1136 18              	   259:    clc
00:1137 A5FB            	   260:    lda FP_A
00:1139 65F2            	   261:    adc FP_R
00:113B 85F2            	   262:    sta FP_R
00:113D 98              	   263:    tya
00:113E 65FC            	   264:    adc FP_A+1
                        	   265: loop2$:
00:1140 6A              	   266:    ror
00:1141 66F2            	   267:    ror FP_R
00:1143 66F1            	   268:    ror FP_C+1
00:1145 66F0            	   269:    ror FP_C
00:1147 CA              	   270:    dex
00:1148 D0E5            	   271:    bne loop1$
00:114A 85F3            	   272:    sta FP_R+1
00:114C A208            	   273:    ldx #8
                        	   274: loop3$:
00:114E 46F3            	   275:    lsr FP_R+1
00:1150 66F2            	   276:    ror FP_R
00:1152 66F1            	   277:    ror FP_C+1
00:1154 66F0            	   278:    ror FP_C
00:1156 CA              	   279:    dex
00:1157 D0F5            	   280:    bne loop3$
                        	   281:    ; restore A and B
00:1159 68              	   282:    pla
00:115A 85FE            	   283:    sta FP_B+1
00:115C 68              	   284:    pla
00:115D 85FD            	   285:    sta FP_B
00:115F 68              	   286:    pla
00:1160 85FC            	   287:    sta FP_A+1
00:1162 68              	   288:    pla
00:1163 85FB            	   289:    sta FP_A
00:1165 24FE            	   290:    bit FP_B+1
00:1167 3006            	   291:    bmi check_cancel$
00:1169 24FC            	   292:    bit FP_A+1
00:116B 3006            	   293:    bmi negative$
00:116D 8011            	   294:    bra return$
                        	   295: check_cancel$:
00:116F 24FC            	   296:    bit FP_A+1
00:1171 300D            	   297:    bmi return$
                        	   298: negative$:
00:1173 A900            	   299:    lda #0
00:1175 38              	   300:    sec
00:1176 E5F0            	   301:    sbc FP_C
00:1178 85F0            	   302:    sta FP_C
00:117A A900            	   303:    lda #0
00:117C E5F1            	   304:    sbc FP_C+1
00:117E 85F1            	   305:    sta FP_C+1
                        	   306: return$:
00:1180 7A              	   307:    ply
00:1181 FA              	   308:    plx
00:1182 60              	   309:    rts
                        	   310: 
                        	   311: ; Optimised version of SQUARE FP_A, only have to check neg at start, no need to neg at end as squares are ALWAYS positv
                        	   312: fp_square: ; FP_C = FP_A * FP_A; FP_R overflow
00:1183 DA              	   313:    phx
00:1184 5A              	   314:    phy
                        	   315:    ; push original FP_A to stack & copy to FP_B
00:1185 A5FB            	   316:    lda FP_A
00:1187 85FD            	   317:    sta FP_B
00:1189 48              	   318:    pha
00:118A A5FC            	   319:    lda FP_A+1
00:118C 85FE            	   320:    sta FP_B+1
00:118E 48              	   321:    pha
00:118F 24FC            	   322:    bit FP_A+1
00:1191 1011            	   323:    bpl init_c$
00:1193 A900            	   324:    lda #0
00:1195 38              	   325:    sec
00:1196 E5FB            	   326:    sbc FP_A
00:1198 85FB            	   327:    sta FP_A
00:119A 85FD            	   328:    sta FP_B
00:119C A900            	   329:    lda #0
00:119E E5FC            	   330:    sbc FP_A+1
00:11A0 85FC            	   331:    sta FP_A+1 ; A = |A|
00:11A2 85FE            	   332:    sta FP_B+1 ; B = |A|
                        	   333: init_c$:
00:11A4 A900            	   334:    lda #0
00:11A6 85F2            	   335:    sta FP_R
00:11A8 85F0            	   336:    sta FP_C
00:11AA 85F1            	   337:    sta FP_C+1
00:11AC A210            	   338:    ldx #16
                        	   339: loop1$:
00:11AE 46FE            	   340:    lsr FP_B+1
00:11B0 66FD            	   341:    ror FP_B
00:11B2 900B            	   342:    bcc loop2$
00:11B4 A8              	   343:    tay
00:11B5 18              	   344:    clc
00:11B6 A5FB            	   345:    lda FP_A
00:11B8 65F2            	   346:    adc FP_R
00:11BA 85F2            	   347:    sta FP_R
00:11BC 98              	   348:    tya
00:11BD 65FC            	   349:    adc FP_A+1
                        	   350: loop2$:
00:11BF 6A              	   351:    ror
00:11C0 66F2            	   352:    ror FP_R
00:11C2 66F1            	   353:    ror FP_C+1
00:11C4 66F0            	   354:    ror FP_C
00:11C6 CA              	   355:    dex
00:11C7 D0E5            	   356:    bne loop1$
00:11C9 85F3            	   357:    sta FP_R+1
00:11CB A208            	   358:    ldx #8
                        	   359: loop3$:
00:11CD 46F3            	   360:    lsr FP_R+1
00:11CF 66F2            	   361:    ror FP_R
00:11D1 66F1            	   362:    ror FP_C+1
00:11D3 66F0            	   363:    ror FP_C
00:11D5 CA              	   364:    dex
00:11D6 D0F5            	   365:    bne loop3$
                        	   366:    ; restore A
00:11D8 68              	   367:    pla
00:11D9 85FC            	   368:    sta FP_A+1
00:11DB 68              	   369:    pla
00:11DC 85FB            	   370:    sta FP_A
                        	   371: return$:
00:11DE 7A              	   372:    ply
00:11DF FA              	   373:    plx
00:11E0 60              	   374:    rts
                        	   375: 
                        	   376: cp_multiply: ; FP_C = FP_A * FP_B; FP_R overflow
00:11E1 DA              	   377:    phx
00:11E2 5A              	   378:    phy
                        	   379:    ; push original A and B to stack
00:11E3 A5FB            	   380:    lda FP_A
00:11E5 48              	   381:    pha
00:11E6 A5FC            	   382:    lda FP_A+1
00:11E8 48              	   383:    pha
00:11E9 A5FD            	   384:    lda FP_B
00:11EB 48              	   385:    pha
00:11EC A5FE            	   386:    lda FP_B+1
00:11EE 48              	   387:    pha
00:11EF 24FC            	   388:    bit FP_A+1
00:11F1 100D            	   389:    bpl check_sign_b$
00:11F3 A900            	   390:    lda #0
00:11F5 38              	   391:    sec
00:11F6 E5FB            	   392:    sbc FP_A
00:11F8 85FB            	   393:    sta FP_A
00:11FA A900            	   394:    lda #0
00:11FC E5FC            	   395:    sbc FP_A+1
00:11FE 85FC            	   396:    sta FP_A+1 ; A = |A|
                        	   397: check_sign_b$:
00:1200 24FE            	   398:    bit FP_B+1
00:1202 100D            	   399:    bpl init_c$
00:1204 A900            	   400:    lda #0
00:1206 38              	   401:    sec
00:1207 E5FD            	   402:    sbc FP_B
00:1209 85FD            	   403:    sta FP_B
00:120B A900            	   404:    lda #0
00:120D E5FE            	   405:    sbc FP_B+1
00:120F 85FE            	   406:    sta FP_B+1 ; B = |B|
                        	   407: init_c$:
                        	   408: ; The magic happens here
                        	   409:    ; Init C and R
00:1211 A5FB            	   410:    lda FP_A
00:1213 8510            	   411:    sta CP_A
00:1215 A5FD            	   412:    lda FP_B
00:1217 8518            	   413:    sta CP_B
00:1219 A501            	   414:    lda CP_MH
00:121B 85F0            	   415:    sta FP_C
                        	   416: 
00:121D A5FC            	   417:    lda FP_A+1
00:121F 8510            	   418:    sta CP_A
00:1221 18              	   419:    clc
00:1222 A5F0            	   420:    lda FP_C
00:1224 6500            	   421:    adc CP_ML
00:1226 85F0            	   422:    sta FP_C
00:1228 A900            	   423:    lda #0
00:122A 6501            	   424:    adc CP_MH
00:122C 85F1            	   425:    sta FP_C+1
                        	   426: 
00:122E A5FB            	   427:    lda FP_A
00:1230 8510            	   428:    sta CP_A
00:1232 A5FE            	   429:    lda FP_B+1
00:1234 8518            	   430:    sta CP_B
00:1236 18              	   431:    clc
00:1237 A5F0            	   432:    lda FP_C
00:1239 6500            	   433:    adc CP_ML
00:123B 85F0            	   434:    sta FP_C
00:123D A5F1            	   435:    lda FP_C+1
00:123F 6501            	   436:    adc CP_MH
00:1241 85F1            	   437:    sta FP_C+1
                        	   438: 
00:1243 A5FC            	   439:    lda FP_A+1
00:1245 8510            	   440:    sta CP_A
00:1247 18              	   441:    clc
00:1248 A5F1            	   442:    lda FP_C+1
00:124A 6500            	   443:    adc CP_ML
00:124C 85F1            	   444:    sta FP_C+1
00:124E A900            	   445:    lda #0
00:1250 6501            	   446:    adc CP_MH
00:1252 85F2            	   447:    sta FP_R
                        	   448:    ; restore A and B
00:1254 68              	   449:    pla
00:1255 85FE            	   450:    sta FP_B+1
00:1257 68              	   451:    pla
00:1258 85FD            	   452:    sta FP_B
00:125A 68              	   453:    pla
00:125B 85FC            	   454:    sta FP_A+1
00:125D 68              	   455:    pla
00:125E 85FB            	   456:    sta FP_A
00:1260 24FE            	   457:    bit FP_B+1
00:1262 3006            	   458:    bmi check_cancel$
00:1264 24FC            	   459:    bit FP_A+1
00:1266 3006            	   460:    bmi negative$
00:1268 8011            	   461:    bra return$
                        	   462: check_cancel$:
00:126A 24FC            	   463:    bit FP_A+1
00:126C 300D            	   464:    bmi return$
                        	   465: negative$:
00:126E A900            	   466:    lda #0
00:1270 38              	   467:    sec
00:1271 E5F0            	   468:    sbc FP_C
00:1273 85F0            	   469:    sta FP_C
00:1275 A900            	   470:    lda #0
00:1277 E5F1            	   471:    sbc FP_C+1
00:1279 85F1            	   472:    sta FP_C+1
                        	   473: return$:
00:127B 7A              	   474:    ply
00:127C FA              	   475:    plx
00:127D 60              	   476:    rts
                        	   477: 
                        	   478: ; Use co-pro lookup for squares: $10 MSB $18 LSB. result $04,$05,$06,$07 LSB to MSB
                        	   479: cp_square:
00:127E DA              	   480:    phx
00:127F 5A              	   481:    phy
                        	   482:    ; push original FP_A to stack & copy to FP_B
00:1280 A5FB            	   483:    lda FP_A
00:1282 48              	   484:    pha
00:1283 A5FC            	   485:    lda FP_A+1
00:1285 48              	   486:    pha
                        	   487:    ; Make A positive
00:1286 24FC            	   488:    bit FP_A+1
00:1288 100D            	   489:    bpl square_c$
00:128A A900            	   490:    lda #0
00:128C 38              	   491:    sec
00:128D E5FB            	   492:    sbc FP_A
00:128F 85FB            	   493:    sta FP_A
00:1291 A900            	   494:    lda #0
00:1293 E5FC            	   495:    sbc FP_A+1
00:1295 85FC            	   496:    sta FP_A+1 ; A = |A|
                        	   497: square_c$:
00:1297 A5FB            	   498:    lda FP_A
00:1299 8518            	   499:    sta CP_B
00:129B A5FC            	   500:    lda FP_A+1
00:129D 8510            	   501:    sta CP_A
                        	   502: 
00:129F A505            	   503:    lda CP_S1
00:12A1 85F0            	   504:    sta FP_C
00:12A3 A506            	   505:    lda CP_S2
00:12A5 85F1            	   506:    sta FP_C+1
00:12A7 A507            	   507:    lda CP_S3
00:12A9 85F2            	   508:    sta FP_R
                        	   509: 
00:12AB 68              	   510:    pla
00:12AC 85FC            	   511:    sta FP_A+1
00:12AE 68              	   512:    pla
00:12AF 85FB            	   513:    sta FP_A
                        	   514: return$:
00:12B1 7A              	   515:    ply
00:12B2 FA              	   516:    plx
00:12B3 60              	   517:    rts
                        	   518: 

Source: "mandel.s"
                        	     2: 
                        	     3: MAND_XMIN = $FD80 ; -2.5
                        	     4: MAND_XMAX = $0380 ; 3.5
                        	     5: MAND_YMIN = $FF00 ; -1
                        	     6: MAND_YMAX = $0200 ; 2
                        	     7: 
                        	     8: MAND_WIDTH = 32
                        	     9: MAND_HEIGHT = 22
                        	    10: MAND_MAX_IT = 63
                        	    11: 
00:12B4 0000            	    12: mand_x0:       .word 0
00:12B6 0000            	    13: mand_y0:       .word 0
00:12B8 0000            	    14: mand_x:        .word 0
00:12BA 0000            	    15: mand_y:        .word 0
00:12BC 0000            	    16: mand_x2:       .word 0
00:12BE 0000            	    17: mand_y2:       .word 0
00:12C0 0000            	    18: mand_xtemp:    .word 0
                        	    19: 
                        	    20: ; Input:
                        	    21: ;  X,Y - bitmap coordinates
                        	    22: ; Output: A - # iterations executed (0 to MAND_MAX_IT-1)
                        	    23: mand_get:
00:12C2 DA              	    24:    phx
00:12C3 5A              	    25:    phy
00:12C4 8A              	    26:    txa
00:12C5 202A10          	    27:    jsr fp_lda_byte   ; A = X coordinate
                        	    28:    FP_LDB_IMM MAND_XMAX  ; B = max scaled X
00:12C8 A980            	     1M    lda #<MAND_XMAX  
00:12CA 85FD            	     2M    sta FP_B
00:12CC A903            	     3M    lda #>MAND_XMAX  
00:12CE 85FE            	     4M    sta FP_B+1
00:12D0 20F510          	    29:    jsr fp_multiply   ; C = A*B
                        	    30:    FP_TCA            ; A = C (X*Xmax)
00:12D3 A5F0            	     1M    lda FP_C
00:12D5 85FB            	     2M    sta FP_A
00:12D7 A5F1            	     3M    lda FP_C+1
00:12D9 85FC            	     4M    sta FP_A+1
                        	    31:    FP_LDB_IMM_INT MAND_WIDTH ; B = width
00:12DB 64FD            	     1M    stz FP_B
00:12DD A920            	     2M    lda #MAND_WIDTH 
00:12DF 85FE            	     3M    sta FP_B+1
00:12E1 207210          	    32:    jsr fp_divide     ; C = A/B
                        	    33:    FP_TCA            ; A = C (scaled X with zero min)
00:12E4 A5F0            	     1M    lda FP_C
00:12E6 85FB            	     2M    sta FP_A
00:12E8 A5F1            	     3M    lda FP_C+1
00:12EA 85FC            	     4M    sta FP_A+1
                        	    34:    FP_LDB_IMM MAND_XMIN  ; B = min scaled X
00:12EC A980            	     1M    lda #<MAND_XMIN  
00:12EE 85FD            	     2M    sta FP_B
00:12F0 A9FD            	     3M    lda #>MAND_XMIN  
00:12F2 85FE            	     4M    sta FP_B+1
00:12F4 206410          	    35:    jsr fp_add        ; C = A+B (scaled X)
                        	    36:    FP_STC mand_x0    ; x0 = C
00:12F7 A5F0            	     1M    lda FP_C
00:12F9 8DB412          	     2M    sta mand_x0    
00:12FC A5F1            	     3M    lda FP_C+1
00:12FE 8DB512          	     4M    sta mand_x0    +1
00:1301 68              	    37:    pla               ; retrieve Y from stack
00:1302 48              	    38:    pha               ; put Y back on stack
00:1303 202A10          	    39:    jsr fp_lda_byte   ; A = Y coordinate
                        	    40:    FP_LDB_IMM MAND_YMAX  ; B = max scaled Y
00:1306 A900            	     1M    lda #<MAND_YMAX  
00:1308 85FD            	     2M    sta FP_B
00:130A A902            	     3M    lda #>MAND_YMAX  
00:130C 85FE            	     4M    sta FP_B+1
00:130E 20F510          	    41:    jsr fp_multiply   ; C = A*B
                        	    42:    FP_TCA            ; A = C (Y*Ymax)
00:1311 A5F0            	     1M    lda FP_C
00:1313 85FB            	     2M    sta FP_A
00:1315 A5F1            	     3M    lda FP_C+1
00:1317 85FC            	     4M    sta FP_A+1
                        	    43:    FP_LDB_IMM_INT  MAND_HEIGHT ; B = height
00:1319 64FD            	     1M    stz FP_B
00:131B A916            	     2M    lda #MAND_HEIGHT 
00:131D 85FE            	     3M    sta FP_B+1
00:131F 207210          	    44:    jsr fp_divide     ; C = A/B
                        	    45:    FP_TCA            ; A = C (scaled Y with zero min)
00:1322 A5F0            	     1M    lda FP_C
00:1324 85FB            	     2M    sta FP_A
00:1326 A5F1            	     3M    lda FP_C+1
00:1328 85FC            	     4M    sta FP_A+1
                        	    46:    FP_LDB_IMM MAND_YMIN  ; B = min scaled Y
00:132A A900            	     1M    lda #<MAND_YMIN  
00:132C 85FD            	     2M    sta FP_B
00:132E A9FF            	     3M    lda #>MAND_YMIN  
00:1330 85FE            	     4M    sta FP_B+1
00:1332 206410          	    47:    jsr fp_add        ; C = A+B (scaled Y)
                        	    48:    FP_STC mand_y0    ; y0 = C
00:1335 A5F0            	     1M    lda FP_C
00:1337 8DB612          	     2M    sta mand_y0    
00:133A A5F1            	     3M    lda FP_C+1
00:133C 8DB712          	     4M    sta mand_y0    +1
00:133F 9CB812          	    49:    stz mand_x
00:1342 9CB912          	    50:    stz mand_x+1
00:1345 9CBA12          	    51:    stz mand_y
00:1348 9CBB12          	    52:    stz mand_y+1
00:134B A200            	    53:    ldx #0            ; X = I (init to 0)
                        	    54: .loop:
                        	    55:    FP_LDA mand_x     ; A = X
00:134D ADB812          	     1M    lda mand_x     
00:1350 85FB            	     2M    sta FP_A
00:1352 ADB912          	     3M    lda mand_x     +1
00:1355 85FC            	     4M    sta FP_A+1
                        	    56: ;   FP_LDB mand_x     ; B = X
00:1357 208311          	    57:    jsr fp_square     ; C = X^2
                        	    58:    FP_STC mand_x2
00:135A A5F0            	     1M    lda FP_C
00:135C 8DBC12          	     2M    sta mand_x2
00:135F A5F1            	     3M    lda FP_C+1
00:1361 8DBD12          	     4M    sta mand_x2+1
                        	    59:    FP_LDA mand_y     ; A = Y
00:1364 ADBA12          	     1M    lda mand_y     
00:1367 85FB            	     2M    sta FP_A
00:1369 ADBB12          	     3M    lda mand_y     +1
00:136C 85FC            	     4M    sta FP_A+1
                        	    60: ;   FP_LDB mand_y     ; B = Y
00:136E 208311          	    61:    jsr fp_square     ; C = Y^2
                        	    62:    FP_STC mand_y2
00:1371 A5F0            	     1M    lda FP_C
00:1373 8DBE12          	     2M    sta mand_y2
00:1376 A5F1            	     3M    lda FP_C+1
00:1378 8DBF12          	     4M    sta mand_y2+1
                        	    63:    FP_LDA mand_x2    ; A = X^2
00:137B ADBC12          	     1M    lda mand_x2    
00:137E 85FB            	     2M    sta FP_A
00:1380 ADBD12          	     3M    lda mand_x2    +1
00:1383 85FC            	     4M    sta FP_A+1
                        	    64:    FP_TCB            ; B = Y^2
00:1385 A5F0            	     1M    lda FP_C
00:1387 85FD            	     2M    sta FP_B
00:1389 A5F1            	     3M    lda FP_C+1
00:138B 85FE            	     4M    sta FP_B+1
00:138D 206410          	    65:    jsr fp_add        ; C = X^2+Y^2
00:1390 A5F1            	    66:    lda FP_C+1
00:1392 38              	    67:    sec
00:1393 E904            	    68:    sbc #4
00:1395 F005            	    69:    beq .check_fraction
00:1397 3007            	    70:    bmi .do_it
00:1399 4C1014          	    71:    jmp .dec_i
                        	    72: .check_fraction:
00:139C A5F0            	    73:    lda FP_C
00:139E D070            	    74:    bne .dec_i
                        	    75: .do_it:
00:13A0 205610          	    76:    jsr fp_subtract   ; C = X^2 - Y^2
                        	    77:    FP_TCA            ; A = C (X^2 - Y^2)
00:13A3 A5F0            	     1M    lda FP_C
00:13A5 85FB            	     2M    sta FP_A
00:13A7 A5F1            	     3M    lda FP_C+1
00:13A9 85FC            	     4M    sta FP_A+1
                        	    78:    FP_LDB mand_x0    ; B = X0
00:13AB ADB412          	     1M    lda mand_x0    
00:13AE 85FD            	     2M    sta FP_B
00:13B0 ADB512          	     3M    lda mand_x0    +1
00:13B3 85FE            	     4M    sta FP_B+1
00:13B5 206410          	    79:    jsr fp_add        ; C = X^2 - Y^2 + X0
                        	    80:    FP_STC mand_xtemp ; Xtemp = C
00:13B8 A5F0            	     1M    lda FP_C
00:13BA 8DC012          	     2M    sta mand_xtemp 
00:13BD A5F1            	     3M    lda FP_C+1
00:13BF 8DC112          	     4M    sta mand_xtemp +1
                        	    81:    FP_LDA mand_x     ; A = X
00:13C2 ADB812          	     1M    lda mand_x     
00:13C5 85FB            	     2M    sta FP_A
00:13C7 ADB912          	     3M    lda mand_x     +1
00:13CA 85FC            	     4M    sta FP_A+1
00:13CC 06FB            	    82:    asl FP_A
00:13CE 26FC            	    83:    rol FP_A+1        ; A = 2*X
                        	    84:    FP_LDB mand_y     ; B = Y
00:13D0 ADBA12          	     1M    lda mand_y     
00:13D3 85FD            	     2M    sta FP_B
00:13D5 ADBB12          	     3M    lda mand_y     +1
00:13D8 85FE            	     4M    sta FP_B+1
00:13DA 20F510          	    85:    jsr fp_multiply   ; C = 2*X*Y
                        	    86:    FP_TCA            ; A = C (2*X*Y)
00:13DD A5F0            	     1M    lda FP_C
00:13DF 85FB            	     2M    sta FP_A
00:13E1 A5F1            	     3M    lda FP_C+1
00:13E3 85FC            	     4M    sta FP_A+1
                        	    87:    FP_LDB mand_y0    ; B = Y0
00:13E5 ADB612          	     1M    lda mand_y0    
00:13E8 85FD            	     2M    sta FP_B
00:13EA ADB712          	     3M    lda mand_y0    +1
00:13ED 85FE            	     4M    sta FP_B+1
00:13EF 206410          	    88:    jsr fp_add        ; C = 2*X*Y + Y0
                        	    89:    FP_STC mand_y     ; Y = C (2*X*Y + Y0)
00:13F2 A5F0            	     1M    lda FP_C
00:13F4 8DBA12          	     2M    sta mand_y     
00:13F7 A5F1            	     3M    lda FP_C+1
00:13F9 8DBB12          	     4M    sta mand_y     +1
00:13FC ADC012          	    90:    lda mand_xtemp
00:13FF 8DB812          	    91:    sta mand_x
00:1402 ADC112          	    92:    lda mand_xtemp+1
00:1405 8DB912          	    93:    sta mand_x+1      ; X = Xtemp
00:1408 E8              	    94:    inx
00:1409 E03F            	    95:    cpx #MAND_MAX_IT
00:140B F003            	    96:    beq .dec_i
00:140D 4C4D13          	    97:    jmp .loop
                        	    98: .dec_i:
00:1410 CA              	    99:    dex
00:1411 8A              	   100:    txa
00:1412 7A              	   101:    ply
00:1413 FA              	   102:    plx
00:1414 60              	   103:    rts

Source: "Examples\mandelbrot.s"
                        	    31: 


Symbols by name:
CP_A                             E:0010
CP_B                             E:0018
CP_MH                            E:0001
CP_ML                            E:0000
CP_S1                            E:0005
CP_S2                            E:0006
CP_S3                            E:0007
FP_A                             E:00FB
FP_B                             E:00FD
FP_C                             E:00F0
FP_R                             E:00F2
IO_ECHO                          E:FD74
MAND_HEIGHT                      E:0016
MAND_MAX_IT                      E:003F
MAND_WIDTH                       E:0020
MAND_XMAX                        E:0380
MAND_XMIN                        E:FD80
MAND_YMAX                        E:0200
MAND_YMIN                        E:FF00
cp_multiply                      A:11E1
cp_square                        A:127E
fp_add                           A:1064
fp_divide                        A:1072
fp_floor                         A:1047
fp_floor_byte                    A:1034
fp_lda_byte                      A:102A
fp_ldb_byte                      A:102F
fp_multiply                      A:10F5
fp_square                        A:1183
fp_subtract                      A:1056
loopx                            A:1009
loopy                            A:1007
mand_get                         A:12C2
mand_x                           A:12B8
mand_x0                          A:12B4
mand_x2                          A:12BC
mand_xtemp                       A:12C0
mand_y                           A:12BA
mand_y0                          A:12B6
mand_y2                          A:12BE

Symbols by value:
0000 CP_ML
0001 CP_MH
0005 CP_S1
0006 CP_S2
0007 CP_S3
0010 CP_A
0016 MAND_HEIGHT
0018 CP_B
0020 MAND_WIDTH
003F MAND_MAX_IT
00F0 FP_C
00F2 FP_R
00FB FP_A
00FD FP_B
0200 MAND_YMAX
0380 MAND_XMAX
1007 loopy
1009 loopx
102A fp_lda_byte
102F fp_ldb_byte
1034 fp_floor_byte
1047 fp_floor
1056 fp_subtract
1064 fp_add
1072 fp_divide
10F5 fp_multiply
1183 fp_square
11E1 cp_multiply
127E cp_square
12B4 mand_x0
12B6 mand_y0
12B8 mand_x
12BA mand_y
12BC mand_x2
12BE mand_y2
12C0 mand_xtemp
12C2 mand_get
FD74 IO_ECHO
FD80 MAND_XMIN
FF00 MAND_YMIN
