Sections:
00: "org0001:8000" (8000-8000)
01: "org0002:fe00" (FE00-FF6E)
02: "org0003:fffa" (FFFA-0)


Source: "Examples\boot.s"
                        	     1: ; Needs to be included in a user-code program (see examples)
                        	     2: ; Serial communication is done with 115200 baud @ 10 Mhz CPU speed
                        	     3: ; (each bit takes 87 clock cycles).
                        	     4: 
                        	     5:     .org $8000
                        	     6: 
                        	     7: DELAY2 .macro
                        	     8:     NOP
                        	     9: .endmacro
                        	    10: DELAY5 .macro
                        	    11:     JMP 1$
                        	    12: 1$: NOP
                        	    13: .endmacro
                        	    14: DELAY10 .macro
                        	    15:     NOP
                        	    16:     NOP
                        	    17:     NOP
                        	    18:     NOP
                        	    19:     NOP
                        	    20: .endmacro
                        	    21: 
                        	    22:     .org $FE00
                        	    23: boot:
01:FE00 78              	    24:     SEI       ; disable interrupts
01:FE01 C500            	    25:     CMP $00   ; set output to high
                        	    26:     ; initial delay to await reset bouncing
01:FE03 A200            	    27:     LDX #0
01:FE05 E8              	    28: 1$: INX
01:FE06 D0FD            	    29:     BNE 1$
                        	    30:     ; set up stack in case it was damaged
01:FE08 A2FF            	    31:     LDX #$FF
01:FE0A 9A              	    32:     TXS
                        	    33:     ; call user code 
01:FE0B 200000          	    34:     JSR main
                        	    35:     ; delay
01:FE0E A200            	    36:     LDX #0
01:FE10 A000            	    37:     LDY #0
01:FE12 C8              	    38: 2$: INY
01:FE13 D0FD            	    39:     BNE 2$
01:FE15 E8              	    40:     INX 
01:FE16 D0FA            	    41:     BNE 2$
01:FE18 4C00FE          	    42:     JMP boot
                        	    43: 
                        	    44: 
                        	    45:     ; send null-terminated string
                        	    46:     ; parameter: Y,X = address of string (X = high byte)
                        	    47:     ; overwrite zero page $00,$01
                        	    48: sendstr:
                        	    49:     ; pointer
01:FE1B 8400            	    50:     STY $00
01:FE1D 8601            	    51:     STX $01
                        	    52: sendstrloop:
01:FE1F A000            	    53:     LDY #0
01:FE21 B100            	    54:     LDA ($00),Y
01:FE23 F00C            	    55:     BEQ sendstrend
01:FE25 2074FE          	    56:     JSR send
01:FE28 E600            	    57:     INC $00
01:FE2A D0F3            	    58:     BNE sendstrloop
01:FE2C E601            	    59:     INC $01
01:FE2E 4C1FFE          	    60:     JMP sendstrloop
                        	    61: sendstrend:
01:FE31 60              	    62:     RTS    
                        	    63: 
                        	    64:     
                        	    65:     ; send 2-digit hexadecimal representation of a number
                        	    66:     ; parameter: A = number
                        	    67: sendhex:
01:FE32 A210            	    68:     LDX #16
01:FE34 2053FE          	    69:     JSR sendhighdigit
01:FE37 A201            	    70:     LDX #1
01:FE39 4C53FE          	    71:     JMP sendhighdigit
                        	    72:   
                        	    73:   
                        	    74:     ; send decimal representation of a number
                        	    75:     ; parameter: A = number
                        	    76: sendnum:
01:FE3C C90A            	    77:     CMP #10
01:FE3E 900E            	    78:     BCC sendnum1digits
01:FE40 C964            	    79:     CMP #100
01:FE42 9005            	    80:     BCC sendnum2digits
01:FE44 A264            	    81:     LDX #100
01:FE46 2053FE          	    82:     JSR sendhighdigit
                        	    83: sendnum2digits:
01:FE49 A20A            	    84:     LDX #10
01:FE4B 2053FE          	    85:     JSR sendhighdigit
                        	    86: sendnum1digits:
01:FE4E A201            	    87:     LDX #1
01:FE50 4C53FE          	    88:     JMP sendhighdigit
                        	    89: 
                        	    90:   
                        	    91:     ; send highest digit of a number and return the number
                        	    92:     ; without this digit
                        	    93:     ; parameter: A = number
                        	    94:     ;            X = value of one digit (e.g. 100)
                        	    95:     ; return:    A = number without highest digit
                        	    96: sendhighdigit:
01:FE53 A400            	    97:     LDY $00  ; keep temporarily
01:FE55 8600            	    98:     STX $00
01:FE57 A230            	    99:     LDX #48  ; ascii '0'
01:FE59 C500            	   100: 1$: CMP $00
01:FE5B 9007            	   101:     BCC highestdigitcomputed     ; if A < digit
01:FE5D 38              	   102:     SEC
01:FE5E E500            	   103:     SBC $00
01:FE60 E8              	   104:     INX
01:FE61 4C59FE          	   105:     JMP 1$
                        	   106: highestdigitcomputed:
01:FE64 8400            	   107:     STY $00  ;  repair zero page
01:FE66 48              	   108:     PHA
01:FE67 8A              	   109:     TXA
01:FE68 C93A            	   110:     CMP #58
01:FE6A 9003            	   111:     BCC 1$          ; if A < 58
01:FE6C 18              	   112:     CLC
01:FE6D 6907            	   113:     ADC #7
01:FE6F 2074FE          	   114: 1$: JSR send
01:FE72 68              	   115:     PLA
01:FE73 60              	   116:     RTS
                        	   117:     
                        	   118:     
                        	   119:     ; send one byte via serial 
                        	   120:     ; does not damage any zero page data
                        	   121:     ; parameter: A 
                        	   122: send:
01:FE74 DA              	   123:     PHX
01:FE75 48              	   124:     PHA
01:FE76 49FF            	   125:     EOR #$FF ; use inverted bits, so stop-bit matches up
01:FE78 A20A            	   126:     LDX #10  ; send 10 bits total
01:FE7A 38              	   127:     SEC      ; prepare inverted start bit
                        	   128: sendloop:                               ;  total cycles
01:FE7B 9006            	   129:     BCC setoutputhigh                   ;  0     2/3
                        	   130: setoutputlow:                           ;
01:FE7D EE0080          	   131:     INC $8000  ; multibyte-operation    ;  2     6
01:FE80 4C88FE          	   132:     JMP setoutputdone                   ;  8     3
                        	   133: setoutputhigh:
01:FE83 C500            	   134:     CMP $00    ; any access to RAM      ;  3     3
01:FE85 C500            	   135:     CMP $00                             ;  6     3
                        	   136:     DELAY2                             ;  9     2
01:FE87 EA              	     1M     NOP
                        	   137: setoutputdone:                          ;  11
                        	   138:     DELAY10                            ;  11    10
01:FE88 EA              	     1M     NOP
01:FE89 EA              	     2M     NOP
01:FE8A EA              	     3M     NOP
01:FE8B EA              	     4M     NOP
01:FE8C EA              	     5M     NOP
                        	   139:     DELAY10                            ;  21    10
01:FE8D EA              	     1M     NOP
01:FE8E EA              	     2M     NOP
01:FE8F EA              	     3M     NOP
01:FE90 EA              	     4M     NOP
01:FE91 EA              	     5M     NOP
                        	   140:     DELAY10                            ;  31    10
01:FE92 EA              	     1M     NOP
01:FE93 EA              	     2M     NOP
01:FE94 EA              	     3M     NOP
01:FE95 EA              	     4M     NOP
01:FE96 EA              	     5M     NOP
                        	   141:     DELAY10                            ;  41    10
01:FE97 EA              	     1M     NOP
01:FE98 EA              	     2M     NOP
01:FE99 EA              	     3M     NOP
01:FE9A EA              	     4M     NOP
01:FE9B EA              	     5M     NOP
                        	   142:     DELAY10                            ;  51    10
01:FE9C EA              	     1M     NOP
01:FE9D EA              	     2M     NOP
01:FE9E EA              	     3M     NOP
01:FE9F EA              	     4M     NOP
01:FEA0 EA              	     5M     NOP
                        	   143:     DELAY10                            ;  61    10
01:FEA1 EA              	     1M     NOP
01:FEA2 EA              	     2M     NOP
01:FEA3 EA              	     3M     NOP
01:FEA4 EA              	     4M     NOP
01:FEA5 EA              	     5M     NOP
                        	   144:     DELAY5                             ;  71    5
01:FEA6 4CA9FE          	     1M     JMP 1$
01:FEA9 EA              	     2M 1$: NOP
                        	   145:     DELAY2                             ;  76    2
01:FEAA EA              	     1M     NOP
                        	   146:     DELAY2                             ;  78    2
01:FEAB EA              	     1M     NOP
01:FEAC 4A              	   147:     LSR  ; next bit (when empty, 0)     ;  80    2
01:FEAD CA              	   148:     DEX                                 ;  82    2
01:FEAE D0CB            	   149:     BNE sendloop                        ;  84    3
                        	   150:                                         ;  87
01:FEB0 68              	   151:     PLA
01:FEB1 FA              	   152:     PLX
01:FEB2 60              	   153:     RTS
                        	   154: 
                        	   155: 
                        	   156:     ; receive a burst of serial data.
                        	   157:     ; parameter: Y,X = address of buffer (X = high byte)
                        	   158:     ;            A = length of buffer
                        	   159:     ; return A = number of bytes received
                        	   160:     ; overwrite zero page $00 - $03
                        	   161: receiveburst:
01:FEB3 8400            	   162:     STY $00  ; buffer address lo
01:FEB5 8601            	   163:     STX $01  ; buffer address high
01:FEB7 8502            	   164:     STA $02  ; buffer size
01:FEB9 A900            	   165:     LDA #0
01:FEBB 8503            	   166:     STA $03  ; bytes received
01:FEBD C502            	   167:     CMP $02
01:FEBF F023            	   168:     BEQ receiveburstend  ; buffer full?
01:FEC1 A900            	   169:     LDA #0   ; wait indefinitely for 1. byte
01:FEC3 20E7FE          	   170:     JSR receive
01:FEC6 A000            	   171:     LDY #0
01:FEC8 9100            	   172:     STA ($00),Y
01:FECA E603            	   173:     INC $03
                        	   174: continuereceiveburst:
01:FECC A503            	   175:     LDA $03
01:FECE C502            	   176:     CMP $02
01:FED0 F012            	   177:     BEQ receiveburstend
01:FED2 A964            	   178:     LDA #100 ; wait some time to see if burst continues
01:FED4 20E7FE          	   179:     JSR receive
01:FED7 E000            	   180:     CPX #0
01:FED9 F009            	   181:     BEQ receiveburstend
01:FEDB A403            	   182:     LDY $03
01:FEDD 9100            	   183:     STA ($00),Y
01:FEDF E603            	   184:     INC $03
01:FEE1 4CCCFE          	   185:     JMP continuereceiveburst
                        	   186: receiveburstend:
01:FEE4 A503            	   187:     LDA $03
01:FEE6 60              	   188:     RTS
                        	   189: 
                        	   190: 
                        	   191:     ; receive serial data.
                        	   192:     ; parameter: A = time to wait for data (when 0: indefinite)
                        	   193:     ; return:    A = received byte
                        	   194:     ;            X = number of bytes received (1 or 0 in case of timeout)
                        	   195: receive:
01:FEE7 5A              	   196:     PHY
01:FEE8 AA              	   197:     TAX
                        	   198:     ; wait for low state (start of start bit)
01:FEE9 18              	   199:     CLC
01:FEEA 58              	   200:     CLI
                        	   201: waitforstartbit:
01:FEEB B014            	   202:     BCS startbitfound
01:FEED 8A              	   203:     TXA
01:FEEE B011            	   204:     BCS startbitfound
01:FEF0 F0F9            	   205:     BEQ waitforstartbit
01:FEF2 B00D            	   206:     BCS startbitfound
01:FEF4 CA              	   207:     DEX
01:FEF5 B00A            	   208:     BCS startbitfound
01:FEF7 D0F2            	   209:     BNE waitforstartbit
01:FEF9 B006            	   210:     BCS startbitfound
01:FEFB 78              	   211:     SEI
01:FEFC B003            	   212:     BCS startbitfound
01:FEFE A200            	   213:     LDX #0
01:FF00 60              	   214:     RTS
                        	   215: startbitfound:                  ; approx. 30 after edge
01:FF01 78              	   216:     SEI                         ; 30    2
01:FF02 A900            	   217:     LDA #0  ; buffer            ; 32    3
01:FF04 A208            	   218:     LDX #8  ; bit counter       ; 35    3
                        	   219:     DELAY10                    ; 38    10
01:FF06 EA              	     1M     NOP
01:FF07 EA              	     2M     NOP
01:FF08 EA              	     3M     NOP
01:FF09 EA              	     4M     NOP
01:FF0A EA              	     5M     NOP
                        	   220:     DELAY10                    ; 48    10
01:FF0B EA              	     1M     NOP
01:FF0C EA              	     2M     NOP
01:FF0D EA              	     3M     NOP
01:FF0E EA              	     4M     NOP
01:FF0F EA              	     5M     NOP
                        	   221:     DELAY10                    ; 58    10
01:FF10 EA              	     1M     NOP
01:FF11 EA              	     2M     NOP
01:FF12 EA              	     3M     NOP
01:FF13 EA              	     4M     NOP
01:FF14 EA              	     5M     NOP
                        	   222:     DELAY10                    ; 68    10
01:FF15 EA              	     1M     NOP
01:FF16 EA              	     2M     NOP
01:FF17 EA              	     3M     NOP
01:FF18 EA              	     4M     NOP
01:FF19 EA              	     5M     NOP
                        	   223:     DELAY10                    ; 78    10
01:FF1A EA              	     1M     NOP
01:FF1B EA              	     2M     NOP
01:FF1C EA              	     3M     NOP
01:FF1D EA              	     4M     NOP
01:FF1E EA              	     5M     NOP
                        	   224:     DELAY10                    ; 88    10
01:FF1F EA              	     1M     NOP
01:FF20 EA              	     2M     NOP
01:FF21 EA              	     3M     NOP
01:FF22 EA              	     4M     NOP
01:FF23 EA              	     5M     NOP
                        	   225:     DELAY10                    ; 98    10
01:FF24 EA              	     1M     NOP
01:FF25 EA              	     2M     NOP
01:FF26 EA              	     3M     NOP
01:FF27 EA              	     4M     NOP
01:FF28 EA              	     5M     NOP
                        	   226:     DELAY10                    ; 108   10
01:FF29 EA              	     1M     NOP
01:FF2A EA              	     2M     NOP
01:FF2B EA              	     3M     NOP
01:FF2C EA              	     4M     NOP
01:FF2D EA              	     5M     NOP
                        	   227:        ; <- middle of 1. bit    ; 118     
                        	   228: bitreceiveloop:                 ; 
01:FF2E 18              	   229:     CLC                         ; 0     2
01:FF2F 58              	   230:     CLI                         ; 2     2
                        	   231:       ; <- possible interrupt     4     0/26
01:FF30 78              	   232:     SEI                         ; 4/30  2
01:FF31 B00F            	   233:     BCS 3$                      ; 6/32  2/3
                        	   234:     DELAY10                    ; 8     10
01:FF33 EA              	     1M     NOP
01:FF34 EA              	     2M     NOP
01:FF35 EA              	     3M     NOP
01:FF36 EA              	     4M     NOP
01:FF37 EA              	     5M     NOP
                        	   235:     DELAY10                    ; 18    10
01:FF38 EA              	     1M     NOP
01:FF39 EA              	     2M     NOP
01:FF3A EA              	     3M     NOP
01:FF3B EA              	     4M     NOP
01:FF3C EA              	     5M     NOP
                        	   236:     DELAY5                     ; 28    5
01:FF3D 4C40FF          	     1M     JMP 1$
01:FF40 EA              	     2M 1$: NOP
                        	   237:     DELAY2                     ; 33    2
01:FF41 EA              	     1M     NOP
01:FF42 6A              	   238: 3$: ROR                         ; 35    2
                        	   239:     DELAY10                    ; 37    10
01:FF43 EA              	     1M     NOP
01:FF44 EA              	     2M     NOP
01:FF45 EA              	     3M     NOP
01:FF46 EA              	     4M     NOP
01:FF47 EA              	     5M     NOP
                        	   240:     DELAY10                    ; 47    10
01:FF48 EA              	     1M     NOP
01:FF49 EA              	     2M     NOP
01:FF4A EA              	     3M     NOP
01:FF4B EA              	     4M     NOP
01:FF4C EA              	     5M     NOP
                        	   241:     DELAY10                    ; 57    10
01:FF4D EA              	     1M     NOP
01:FF4E EA              	     2M     NOP
01:FF4F EA              	     3M     NOP
01:FF50 EA              	     4M     NOP
01:FF51 EA              	     5M     NOP
                        	   242:     DELAY10                    ; 67    10
01:FF52 EA              	     1M     NOP
01:FF53 EA              	     2M     NOP
01:FF54 EA              	     3M     NOP
01:FF55 EA              	     4M     NOP
01:FF56 EA              	     5M     NOP
                        	   243:     DELAY2                     ; 77    2
01:FF57 EA              	     1M     NOP
                        	   244:     DELAY2                     ; 79    2
01:FF58 EA              	     1M     NOP
01:FF59 CA              	   245:     DEX                         ; 81    2
01:FF5A D0D2            	   246:     BNE bitreceiveloop          ; 83    3/2
                        	   247:                                 ; 86  ???
                        	   248:     ; revert input bits
01:FF5C 49FF            	   249:     EOR #$FF   
01:FF5E A201            	   250:     LDX #1
                        	   251: waitforstopbit:
01:FF60 18              	   252:     CLC
01:FF61 58              	   253:     CLI
                        	   254:       ; <- possible interrupt
01:FF62 78              	   255:     SEI
01:FF63 B0FB            	   256:     BCS waitforstopbit
01:FF65 7A              	   257:     PLY
01:FF66 60              	   258:     RTS
                        	   259: 
                        	   260: 
                        	   261:     ; Interrupt handler to trigger when the IRQB pin is low. 
                        	   262:     ; It will just set the C flag (and overwrite the Y register). 
                        	   263:     ; Also it will disable interrupts upon exit.
                        	   264:     ; Other flags remain unchanged
                        	   265: irqhandler:                     ;       
01:FF67 A8              	   266:     TAY                         ; 7     2
01:FF68 68              	   267:     PLA                         ; 9     4
01:FF69 0905            	   268:     ORA #$05                    ; 13    2
01:FF6B 48              	   269:     PHA                         ; 15    3
01:FF6C 98              	   270:     TYA                         ; 18    2
01:FF6D 40              	   271:     RTI                         ; 20    6
                        	   272:                                 ; 26
                        	   273: 
                        	   274:     ; vector table
                        	   275:     .org $FFFA
02:FFFA 00FE            	   276:     .word boot       ; NMIB
02:FFFC 00FE            	   277:     .word boot       ; RESB
02:FFFE 67FF            	   278:     .word irqhandler ; BRK/IRQB
                        	   279: 


Symbols by name:
bitreceiveloop                   A:FF2E
boot                             A:FE00
continuereceiveburst             A:FECC
highestdigitcomputed             A:FE64
irqhandler                       A:FF67
main                            external
receive                          A:FEE7
receiveburst                     A:FEB3
receiveburstend                  A:FEE4
send                             A:FE74
sendhex                          A:FE32
sendhighdigit                    A:FE53
sendloop                         A:FE7B
sendnum                          A:FE3C
sendnum1digits                   A:FE4E
sendnum2digits                   A:FE49
sendstr                          A:FE1B
sendstrend                       A:FE31
sendstrloop                      A:FE1F
setoutputdone                    A:FE88
setoutputhigh                    A:FE83
setoutputlow                     A:FE7D
startbitfound                    A:FF01
waitforstartbit                  A:FEEB
waitforstopbit                   A:FF60

Symbols by value:
FE00 boot
FE1B sendstr
FE1F sendstrloop
FE31 sendstrend
FE32 sendhex
FE3C sendnum
FE49 sendnum2digits
FE4E sendnum1digits
FE53 sendhighdigit
FE64 highestdigitcomputed
FE74 send
FE7B sendloop
FE7D setoutputlow
FE83 setoutputhigh
FE88 setoutputdone
FEB3 receiveburst
FECC continuereceiveburst
FEE4 receiveburstend
FEE7 receive
FEEB waitforstartbit
FF01 startbitfound
FF2E bitreceiveloop
FF60 waitforstopbit
FF67 irqhandler
